const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–≥—Ä—ã
let NUM_OBJECTS = 33;
const SIZE = 15;
const ICONS = {
    rock: "ü™®",
    paper: "üìÑ",
    scissors: "‚úÇÔ∏è"
};
let speedMultiplier = 1.0; // –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏

// –ú–∞—Å—Å–∏–≤—ã –æ–±—ä–µ–∫—Ç–æ–≤
let rocks = [];
let papers = [];
let scissors = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
// function createObjects(array, type) {
//     for (let i = 0; i < NUM_OBJECTS; i++) {
//         array.push({
//             x: Math.random() * canvas.width,
//             y: Math.random() * canvas.height,
//             type: type,
//             dx: (Math.random() - 0.5) * 2.5 * speedMultiplier,
//             dy: (Math.random() - 0.5) * 2.5 * speedMultiplier
//         });
//     }
// }

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –±–ª–∏–∂–µ –∫ —Å–µ—Ä–µ–¥–∏–Ω–µ –∫—Ä–∞—ë–≤
function createObjects(array, type) {
    let startX, startY;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –±–ª–∏–∂–µ –∫ —Å–µ—Ä–µ–¥–∏–Ω–µ –∫—Ä–∞—ë–≤
    if (type === "rock") { // –ö–∞–º–Ω–∏ ‚Äî –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π –∫—Ä–∞–π (—Ü–µ–Ω—Ç—Ä –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã)
        startX = canvas.width / 4; // –ß–µ—Ç–≤–µ—Ä—Ç—å —à–∏—Ä–∏–Ω—ã –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
        startY = 25; // –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
    } else if (type === "paper") { // –ë—É–º–∞–≥–∞ ‚Äî –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π
        startX = (canvas.width * 3) / 4; // –¢—Ä–∏ —á–µ—Ç–≤–µ—Ä—Ç–∏ —à–∏—Ä–∏–Ω—ã
        startY = 25;
    } else if (type === "scissors") { // –ù–æ–∂–Ω–∏—Ü—ã ‚Äî –Ω–∏–∂–Ω–∏–π —Ü–µ–Ω—Ç—Ä
        startX = canvas.width / 2; // –¶–µ–Ω—Ç—Ä –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        startY = canvas.height - SIZE - 25; // –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
    }

    for (let i = 0; i < NUM_OBJECTS; i++) {
        array.push({
            x: startX + Math.random() * 50 - 25, // –ù–µ–±–æ–ª—å—à–æ–π —Ä–∞–∑–±—Ä–æ—Å –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞
            y: startY + Math.random() * 50 - 25,
            type: type,
            dx: (Math.random() - 0.5) * 2.5 * speedMultiplier, // –°–∫–æ—Ä–æ—Å—Ç—å
            dy: (Math.random() - 0.5) * 2.5 * speedMultiplier
        });
    }
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initializeGame() {
    rocks = [];
    papers = [];
    scissors = [];
    createObjects(rocks, "rock");
    createObjects(papers, "paper");
    createObjects(scissors, "scissors");
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
function drawObjects(objects, icon) {
    objects.forEach(obj => {
        ctx.font = `${SIZE}px Arial`;
        ctx.fillText(icon, obj.x, obj.y);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
function updatePositions(objects) {
    objects.forEach(obj => {
        obj.x += obj.dx;
        obj.y += obj.dy;

        // –û—Ç—Å–∫–æ–∫ –æ—Ç —Å—Ç–µ–Ω
        if (obj.x < 0 || obj.x > canvas.width - SIZE) obj.dx *= -1;
        if (obj.y < 0 || obj.y > canvas.height - SIZE) obj.dy *= -1;
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
function checkCollisions() {
    // Rock vs Paper: Rock disappears, Paper stays
    papers.forEach((paper, index) => {
        rocks = rocks.filter(rock => {
            const hit = distance(paper, rock) < SIZE;
            if (hit) {
                // –£–¥–∞–ª—è–µ–º –∫–∞–º–µ–Ω—å, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º –±—É–º–∞–≥—É
                return false;
            }
            return true;
        });
    });

    // Paper vs Scissors: Scissors disappear, Paper stays
    scissors.forEach((scissor, index) => {
        papers = papers.filter(paper => {
            const hit = distance(scissor, paper) < SIZE;
            if (hit) {
                // –£–¥–∞–ª—è–µ–º –Ω–æ–∂–Ω–∏—Ü—ã, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º –±—É–º–∞–≥—É
                return false;
            }
            return true;
        });
    });

    // Scissors vs Rock: Scissors disappear, Rock stays
    rocks.forEach((rock, index) => {
        scissors = scissors.filter(scissor => {
            const hit = distance(rock, scissor) < SIZE;
            if (hit) {
                // –£–¥–∞–ª—è–µ–º –Ω–æ–∂–Ω–∏—Ü—ã, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º –∫–∞–º–µ–Ω—å
                return false;
            }
            return true;
        });
    });
}

function announceWinner() {
    if (rocks.length > papers.length && rocks.length > scissors.length) {
        console.log("–ü–æ–±–µ–¥–∏–ª–∏ –∫–∞–º–Ω–∏! ü™®");
    } else if (papers.length > rocks.length && papers.length > scissors.length) {
        console.log("–ü–æ–±–µ–¥–∏–ª–∞ –±—É–º–∞–≥–∞! üìÑ");
    } else if (scissors.length > rocks.length && scissors.length > papers.length) {
        console.log("–ü–æ–±–µ–¥–∏–ª–∏ –Ω–æ–∂–Ω–∏—Ü—ã! ‚úÇÔ∏è");
    } else {
        console.log("–ù–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –Ω–∏—á—å—è!");
    }
}


// –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
function distance(a, b) {
    return Math.hypot(a.x - b.x, a.y - b.y);
}

// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∏–≥—Ä—ã
function gameLoop() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    updatePositions(rocks);
    updatePositions(papers);
    updatePositions(scissors);
    checkCollisions();

    drawObjects(rocks, ICONS.rock);
    drawObjects(papers, ICONS.paper);
    drawObjects(scissors, ICONS.scissors);

    ctx.fillStyle = "#FFF";
    ctx.font = "20px Arial";
    ctx.fillText(`ü™® ${rocks.length}   üìÑ ${papers.length}   ‚úÇÔ∏è ${scissors.length}`, 10, 30);

    // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏—Å—á–µ–∑–ª–∏
    if (rocks.length === 0 && scissors.length === 0) {
        announceWinner();
    } else if (rocks.length === 0 && papers.length === 0) {
        announceWinner();
    } else if (scissors.length === 0 && papers.length === 0) {
        announceWinner();
    }
    requestAnimationFrame(gameLoop);
}

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
document.getElementById("increaseSpeed").addEventListener("click", () => {
    increaseSpeed(1.2); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ 20%
});

function increaseSpeed(multiplier) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    [...rocks, ...papers, ...scissors].forEach(obj => {
        obj.dx *= multiplier;
        obj.dy *= multiplier;
    });
}

document.getElementById("restartGame").addEventListener("click", () => {
    speedMultiplier = 1.0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
    initializeGame(); // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
});

document.getElementById("setObjectCount").addEventListener("click", () => {
    const inputCount = parseInt(document.getElementById("objectCount").value);
    if (inputCount >= 10) {
        NUM_OBJECTS = inputCount; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
        initializeGame();
    } else {
        alert("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 10.");
    }
});

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
initializeGame();
gameLoop();